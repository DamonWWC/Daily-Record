<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PCI.Framework.ORM</name>
    </assembly>
    <members>
        <member name="T:PCI.Framework.ORM.ConnectType">
            <summary>
            数据库连接类型
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.ConnectType.Sybase">
            <summary>
            sysbase数据库连接
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.ConnectType.SQLite">
            <summary>
            Sqlite数据库连接
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.ConnectType.SQLServer">
            <summary>
            SqlServer数据库连接
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.ConnectType.Oracle">
            <summary>
            Oracle数据库连接
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.ConnectType.MySql">
            <summary>
            MySql数据库连接
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.ConnectType.Db2">
            <summary>
            DB2数据库连接
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.ConnectType.PostgreSQL">
            <summary>
            PostgreSQL数据库连接
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.ConnectType.Dm">
            <summary>
            达梦数据库
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.ConnectType.GBase">
            <summary>
            南大通用数据库
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.DAFacade">
            <summary>
            数据访问门面基类
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DAFacade.Connection">
            <summary>
            数据库连接串
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DAFacade.CommanTimeout">
            <summary>
            查询超时时间
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DAFacade.Prefix">
            <summary>
            参数化sql的变量前缀
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DAFacade.DBType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.CreateConnection(System.String)">
            <summary>
            创建数据库连接
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.GetAdapter(System.Data.IDbCommand)">
            <summary>
            获取适配器
            </summary>
            <param name="cmd">数据库访问命令</param>
            <returns>适配器接口</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.GetCommand(System.String,System.Data.IDataParameter[])">
            <summary>
            创建命令
            </summary>
            <param name="sql">sql语句</param>
            <param name="para">参数</param>
            <returns>sql命令</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.GetParameter(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            创建参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <param name="type">类型</param>
            <param name="size">参数长度</param>
            <param name="direction">参数方向</param>
            <returns>参数接口</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.GetPageSql(System.String,System.Int32,System.Int32)">
            <summary>
            获取分页语句
            </summary>
            <param name="sql">sql</param>
            <param name="page">第几页</param>
            <param name="resultsPerPage">每页数量</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.GetTotalCount(System.String,System.Object)">
            <summary>
            查询sql结果集的总数
            </summary>
            <param name="sql">sql</param>
            <param name="param">参数</param>
            <returns>总数</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.CreateTransaction">
            <summary>
            创建事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.Count``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            查询数量
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="predicate">过滤条件谓词</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>数量</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.Insert``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            新增
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="entity">实体</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>主键</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            新增多个
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="entities">实体集合</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>主键</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.Get``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据主键获取
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="id">主键</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>实体</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.GetList``1(System.Object,System.Collections.Generic.IList{PCI.Framework.ORM.DapperExtensions.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取全部
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="predicate">过滤条件谓词</param>
            <param name="sort">排序</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>结果集</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.Delete``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据实体删除
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="entity">实体</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.Delete``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据谓词条件删除
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="predicate">谓词删除条件,使用IList IPredicate和IPredicateGroup</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.Delete(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据sql传参删除
            </summary>
            <param name="sql">delete语句</param>
            <param name="param">参数</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.Update``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据实体更新
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="entity">实体</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="ignoreAllKeyProperties">不需更新的字段</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.Query``1(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询集合
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">参数</param>
            <param name="transaction">事务</param>
            <param name="buffered">是否缓存</param>
            <param name="commandTimeout">超时时间</param>
            <param name="commandType">命令类型</param>
            <returns>结果集</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.QueryFirst``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            返回结果集的第一个实体,不存在则返回null
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">参数</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="commandType">命令类型</param>
            <returns>结果集的第一个实体</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.GetPageList``1(System.Object,System.Collections.Generic.IList{PCI.Framework.ORM.DapperExtensions.ISort},System.Int32,System.Int32,System.Int32@,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="predicate">谓词表达式</param>
            <param name="sort">排序</param>
            <param name="page">第几页,页是从1开始的</param>
            <param name="resultsPerPage">每页数量</param>
            <param name="totalCount">总记录数</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">是否缓存</param>
            <returns>结果集</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.GetPageList``1(System.String,System.Int32,System.Int32,System.Int32@,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">参数</param>
            <param name="page">第几页，页是从1开始的</param>
            <param name="resultsPerPage">每页个数</param>
            <param name="totalCount">总记录数</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">命令超时时间</param>
            <param name="buffered">是否缓存</param>
            <returns>结果集</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.GetList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IList{PCI.Framework.ORM.DapperExtensions.ISort},System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询集合(表达式)
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="where">表达式</param>
            <param name="sort">排序字段</param>
            <param name="commandType">命令类型</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">是否缓存</param>
            <returns>结果集</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.GetPageList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IList{PCI.Framework.ORM.DapperExtensions.ISort},System.Int32,System.Int32,System.Int32@,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            分页查询(表达式)
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="where">表达式</param>
            <param name="sort">排序字段</param>
            <param name="page">第几页</param>
            <param name="resultsPerPage">每页个数</param>
            <param name="totalCount">总记录数</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">命令超时时间</param>
            <param name="buffered">是否缓存</param>
            <returns>结果集</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除(表达式)
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="where">where条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.Update``1(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            更新(表达式)
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="where">where条件</param>
            <param name="set">set语句的值</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            查询数量(表达式)
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="where">where条件</param>
            <param name="select">查询字段值</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>数量</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.CreateDAQuery``1">
            <summary>
            创建可查询的对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.ExecuteNonQuery(System.String,System.Data.IDbDataParameter[],System.Boolean,System.Data.IDbTransaction)">
            <summary>
            无查询执行
            </summary>
            <param name="sql">执行SQL</param>
            <param name="param">参数</param>
            <param name="isStoredProcedure">是否是存储过程</param>
            <param name="transaction">事务</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.ExecuteScalar(System.String,System.Data.IDbDataParameter[],System.Boolean,System.Data.IDbTransaction,System.Int32)">
            <summary>
            执行查询，并返回结果集的第一行第一列，忽略额外的行列
            </summary>
            <param name="sql">执行SQL</param>
            <param name="param">参数</param>
            <param name="isStoredProcedure">是否是存储过程</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">执行超时</param>
            <returns>查询对象</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.ExecuteTable(System.String,System.Data.IDbDataParameter[],System.Boolean,System.Int32)">
            <summary>
            执行返回一个名为Table的DataTable
            </summary>
            <param name="sql">执行SQL</param>
            <param name="param">参数</param>
            <param name="isStoredProcedure">是否设成 <c>true</c> [是否是存储过程].</param>
            <param name="commandTimeout">执行超时</param>
            <returns>数据表</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.ExecuteReader(System.String,System.Data.IDbDataParameter[],System.Data.CommandBehavior,System.Boolean,System.Int32,System.Data.IDbTransaction)">
            <summary>
            执行返回DataReader
            </summary>
            <param name="sql">执行SQL</param>
            <param name="param">参数</param>
            <param name="behavior">连接说明</param>
            <param name="isStoredProcedure">是否设成 <c>true</c> [是否是存储过程].</param>
            <param name="commandTimeout">执行超时</param>
            <returns>数据表</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.Fill(System.String,System.Data.DataSet,System.Data.IDataParameter[],System.Boolean,System.Int32)">
            <summary>
            填充dataset,并生成一个名为Table的DataTable
            </summary>
            <param name="sql">查询SQL</param>
            <param name="dataset">dataset</param>
            <param name="param">参数</param>
            <param name="isStoredProcedure">是否是存储过程</param>
            <param name="commandTimeout">执行超时</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.GetTableName(System.Type)">
            <summary>
            获取表名（通过Dapper-Extension）
            </summary>
            <param name="t">泛型类型</param>
            <returns>表名</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.GetColumnName(System.Type,System.String)">
            <summary>
            获取实体字段对应的数据库列名，包含车站.（通过Dapper-Extension）
            </summary>
            <param name="t">泛型类型</param>
            <param name="fieldName">字段名称</param>
            <returns>车站.列名</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.GetColumnNameOnly(System.Type,System.String)">
            <summary>
            获取实体字段对应的数据库列名，纯列名（通过Dapper-Extension）
            当查询不到列名或者列名被忽略时，返回null
            </summary>
            <param name="t">泛型类型</param>
            <param name="fieldName">字段名称</param>
            <returns>列名</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.SelectExpression2Sql``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IList{PCI.Framework.ORM.DapperExtensions.ISort},System.String@,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <summary>
            表达式转成sql
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="where">where条件</param>
            <param name="sort">排序</param>
            <param name="sql">返回参数化sql</param>
            <param name="parameters">参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.DeleteExpression2Sql``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String@,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <summary>
            表达式转成sql
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="where">where条件</param>
            <param name="sql">返回参数化sql</param>
            <param name="parameters">参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.UpdateExpression2Sql``1(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String@,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <summary>
            表达式转成sql
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="where">where条件</param>
            <param name="set">set语句的值</param>
            <param name="sql">返回参数化sql</param>
            <param name="parameters">参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.CountExpression2Sql``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String@,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <summary>
            表达式转成sql
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="where">where条件</param>
            <param name="select">查询字段值</param>
            <param name="sql">返回参数化sql</param>
            <param name="parameters">参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacade.Dispose">
            <summary>
            实现释放
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.DAFacadeFactory">
            <summary>
            数据访问门面工厂类
            只用于创建不同数据库的数据访问门面，采用简单工厂模式。
            
            目的：
                1.提供一个创建具体DAFacade实例的方法；
                2.将创建具体的DAFacade实例和用户代码分离
            
            使用规范：
                略
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DAFacadeFactory.CreateDAFacade(PCI.Framework.ORM.ConnectType,System.String,System.Int32)">
            <summary>
            创建连接器
            </summary>
            <param name="type">数据库类型</param>
            <param name="constr">数据库连接串</param>
            <param name="commandTimeout">执行超时时间</param>
            <returns>连接器</returns>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.DapperExtensions.DefaultMapper">
            <summary>
            Gets or sets the default class mapper to use when generating class maps. If not specified, AutoClassMapper T is used.
            DapperExtensions.Configure(Type, IList Assembly, ISqlDialect) can be used instead to set all values at once
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.DapperExtensions.SqlDialect">
            <summary>
            Gets or sets the type of sql to be generated.
            DapperExtensions.Configure(Type, IList Assembly , ISqlDialect) can be used instead to set all values at once
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.DapperExtensions.InstanceFactory">
            <summary>
            Get or sets the Dapper Extensions Implementation Factory.
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.DapperExtensions.Instance">
            <summary>
            Gets the Dapper Extensions Implementation
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.DapperExtensions.SetMappingAssemblies(System.Collections.Generic.IList{System.Reflection.Assembly})">
            <summary>
            Add other assemblies that Dapper Extensions will search if a mapping is not found in the same assembly of the POCO.
            </summary>
            <param name="assemblies"></param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.DapperExtensions.Configure(PCI.Framework.ORM.DapperExtensions.IDapperExtensionsConfiguration)">
            <summary>
            Configure DapperExtensions extension methods.
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.DapperExtensions.Configure(System.Type,System.Collections.Generic.IList{System.Reflection.Assembly},PCI.Framework.ORM.DapperExtensions.Sql.ISqlDialect)">
            <summary>
            Configure DapperExtensions extension methods.
            </summary>
            <param name="defaultMapper"></param>
            <param name="mappingAssemblies"></param>
            <param name="sqlDialect"></param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.DapperExtensions.Get``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a query for the specified id, returning the data typed as per T
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.DapperExtensions.Insert``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes an insert query for the specified entity.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.DapperExtensions.Insert``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes an insert query for the specified entity, returning the primary key.  
            If the entity has a single key, just the value is returned.  
            If the entity has a composite key, an IDictionary&lt;string, object&gt; is returned with the key values.
            The key value for the entity will also be updated if the KeyType is a Guid or Identity.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.DapperExtensions.Update``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Executes an update query for the specified entity.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.DapperExtensions.Delete``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a delete query for the specified entity.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.DapperExtensions.Delete``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a delete query using the specified predicate.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.DapperExtensions.GetList``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{PCI.Framework.ORM.DapperExtensions.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Executes a select query using the specified predicate, returning an IEnumerable data typed as per T.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.DapperExtensions.GetPage``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{PCI.Framework.ORM.DapperExtensions.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Executes a select query using the specified predicate, returning an IEnumerable data typed as per T.
            Data returned is dependent upon the specified page and resultsPerPage.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.DapperExtensions.GetSet``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{PCI.Framework.ORM.DapperExtensions.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Executes a select query using the specified predicate, returning an IEnumerable data typed as per T.
            Data returned is dependent upon the specified firstResult and maxResults.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.DapperExtensions.Count``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a query using the specified predicate, returning an integer that represents the number of rows that match the query.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.DapperExtensions.GetMultiple(System.Data.IDbConnection,PCI.Framework.ORM.DapperExtensions.GetMultiplePredicate,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a select query for multiple objects, returning IMultipleResultReader for each predicate.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.DapperExtensions.GetMap``1">
            <summary>
            Gets the appropriate mapper for the specified type T. 
            If the mapper for the type is not yet created, a new mapper is generated from the mapper type specifed by DefaultMapper.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.DapperExtensions.ClearCache">
            <summary>
            Clears the ClassMappers for each type.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.DapperExtensions.GetNextGuid">
            <summary>
            Generates a COMB Guid which solves the fragmented index issue.
            See: http://davybrion.com/blog/2009/05/using-the-guidcomb-identifier-strategy
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack">
            <summary>
            SqlPack
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.tableAlias">
            <summary>
            tableAlias
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.dicTableName">
            <summary>
            dicTableName
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.tableAliasQueue">
            <summary>
            tableAliasQueue
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.FuncGetTableName">
            <summary>
            获取表名,参数：实体类型。
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.FuncGetColumnName">
            <summary>
            获取列名，参数：实体类型，字段名
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.IsEnableNullValue">
            <summary>
            更新和新增时，是否对null值属性进行sql拼接操作
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.DefaultType">
            <summary>
            默认T类型
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.IsSingleTable">
            <summary>
            IsSingleTable
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.SelectFields">
            <summary>
            SelectFields
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.SelectFieldsStr">
            <summary>
            SelectFieldsStr
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.Length">
            <summary>
            Length
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.Sql">
            <summary>
            Sql
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.DatabaseType">
            <summary>
            DatabaseType
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.DbParams">
            <summary>
            DbParams
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.DbParamPrefix">
            <summary>
            DbParamPrefix
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.FormatTempl">
            <summary>
            为数据库的列名加上前后缀
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.#ctor">
            <summary>
            SqlPack
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.Item(System.Int32)">
            <summary>
            this[index]
            </summary>
            <param name="index">索引</param>
            <returns>char</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.op_Addition(PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack,System.String)">
            <summary>
            operator +
            </summary>
            <param name="sqlPack">sql打包对象</param>
            <param name="sql">sql语句</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.AddDbParameter(System.Object,System.String)">
            <summary>
            AddDbParameter
            </summary>
            <param name="parameterValue">参数值</param>
            <param name="parameterKey">参数名称</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.SetTableAlias(System.String)">
            <summary>
            SetTableAlias
            </summary>
            <param name="tableName">表名</param>
            <returns>bool</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.GetTableAlias(System.String)">
            <summary>
            GetTableAlias
            </summary>
            <param name="tableName">表名</param>
            <returns>string</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.GetFormatName(System.String)">
            <summary>
            GetFormatName
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.GetTableName(System.Type)">
            <summary>
            GetTableName
            </summary>
            <param name="type">类型</param>
            <returns>string</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.GetColumnName(System.String)">
            <summary>
            GetFormatColumnName
            </summary>
            <param name="columnName">列名</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.GetColumnInfo(System.Type,System.Reflection.MemberInfo)">
            <summary>
            GetColumnInfo
            </summary>
            <param name="type">类型</param>
            <param name="member">成员</param>
            <returns>Tuple</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.GetPrimaryKey(System.Type,System.Boolean)">
            <summary>
            GetPrimaryKey
            </summary>
            <param name="type">类型</param>
            <param name="isFormat">是否格式化</param>
            <returns>Tuple</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack.ToString">
            <summary>
            ToString
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BinaryExpressionResolve">
            <summary>
            表示具有二进制运算符的表达式
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BinaryExpressionResolve.OperatorParser(System.Linq.Expressions.ExpressionType,System.Int32,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack,System.Boolean)">
            <summary>
            OperatorParser
            </summary>
            <param name="expressionNodeType">表达式树节点类型</param>
            <param name="operatorIndex">操作符索引</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="useIs">是否使用is</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BinaryExpressionResolve.Join(System.Linq.Expressions.BinaryExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Join
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BinaryExpressionResolve.Where(System.Linq.Expressions.BinaryExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ConstantExpressionResolve">
            <summary>
            表示具有常数值的表达式
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ConstantExpressionResolve.Select(System.Linq.Expressions.ConstantExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ConstantExpressionResolve.Where(System.Linq.Expressions.ConstantExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ConstantExpressionResolve.In(System.Linq.Expressions.ConstantExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            In
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ConstantExpressionResolve.GroupBy(System.Linq.Expressions.ConstantExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ConstantExpressionResolve.OrderBy(System.Linq.Expressions.ConstantExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack,PCI.Framework.ORM.DapperExtensions.LambdaExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.InvocationExpressionResolve">
            <summary>
            表示将委托或lambda表达式应用于参数表达式列表的表达式
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.InvocationExpressionResolve.Where(System.Linq.Expressions.InvocationExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.LambdaExpressionResolve">
            <summary>
            描述一个lambda表达式
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.LambdaExpressionResolve.Where(System.Linq.Expressions.LambdaExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ListInitExpressionResolve">
            <summary>
            表示包含集合初始值设定项的构造函数调用
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ListInitExpressionResolve.Insert(System.Linq.Expressions.ListInitExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ListInitExpressionResolve.GroupBy(System.Linq.Expressions.ListInitExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ListInitExpressionResolve.OrderBy(System.Linq.Expressions.ListInitExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack,PCI.Framework.ORM.DapperExtensions.LambdaExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MemberExpressionResolve">
            <summary>
            表示访问字段或属性
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MemberExpressionResolve.Insert(System.Linq.Expressions.MemberExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MemberExpressionResolve.Update(System.Linq.Expressions.MemberExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MemberExpressionResolve.Select(System.Linq.Expressions.MemberExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MemberExpressionResolve.Join(System.Linq.Expressions.MemberExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Join
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MemberExpressionResolve.Where(System.Linq.Expressions.MemberExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MemberExpressionResolve.In(System.Linq.Expressions.MemberExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            In
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MemberExpressionResolve.GroupBy(System.Linq.Expressions.MemberExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MemberExpressionResolve.OrderBy(System.Linq.Expressions.MemberExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack,PCI.Framework.ORM.DapperExtensions.LambdaExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MemberExpressionResolve.Max(System.Linq.Expressions.MemberExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Max
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MemberExpressionResolve.Min(System.Linq.Expressions.MemberExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Min
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MemberExpressionResolve.Avg(System.Linq.Expressions.MemberExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Avg
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MemberExpressionResolve.Count(System.Linq.Expressions.MemberExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Count
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MemberExpressionResolve.Sum(System.Linq.Expressions.MemberExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Sum
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MemberInitExpressionResolve">
            <summary>
            表示调用构造函数并初始化新对象的一个或多个成员
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MemberInitExpressionResolve.Insert(System.Linq.Expressions.MemberInitExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MemberInitExpressionResolve.Update(System.Linq.Expressions.MemberInitExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve">
            <summary>
            表示对静态方法或实例方法的调用
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.methods">
            <summary>
            methods
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.IN(System.Linq.Expressions.MethodCallExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            IN
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.NotIn(System.Linq.Expressions.MethodCallExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Not In
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.Like(System.Linq.Expressions.MethodCallExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Like
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.LikeLeft(System.Linq.Expressions.MethodCallExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            LikeLeft
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.LikeRight(System.Linq.Expressions.MethodCallExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            LikeRight
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.NotLike(System.Linq.Expressions.MethodCallExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            NotLike
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.Contains(System.Linq.Expressions.MethodCallExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Contains
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.IsNullOrEmpty(System.Linq.Expressions.MethodCallExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            IsNullOrEmpty
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.Equals(System.Linq.Expressions.MethodCallExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Equals
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.ToUpper(System.Linq.Expressions.MethodCallExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            ToUpper
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.ToLower(System.Linq.Expressions.MethodCallExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            ToLower
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.Trim(System.Linq.Expressions.MethodCallExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Trim
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.TrimStart(System.Linq.Expressions.MethodCallExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            TrimStart
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.TrimEnd(System.Linq.Expressions.MethodCallExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            TrimEnd
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.In(System.Linq.Expressions.MethodCallExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            In
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.Where(System.Linq.Expressions.MethodCallExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.Insert(System.Linq.Expressions.MethodCallExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression"></param>
            <param name="sqlPack"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.GroupBy(System.Linq.Expressions.MethodCallExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.MethodCallExpressionResolve.OrderBy(System.Linq.Expressions.MethodCallExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack,PCI.Framework.ORM.DapperExtensions.LambdaExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.NewArrayExpressionResolve">
            <summary>
            表示创建一个新数组，并可能初始化该新数组的元素
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.NewArrayExpressionResolve.In(System.Linq.Expressions.NewArrayExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            In
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.NewArrayExpressionResolve.Insert(System.Linq.Expressions.NewArrayExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.NewArrayExpressionResolve.GroupBy(System.Linq.Expressions.NewArrayExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.NewArrayExpressionResolve.OrderBy(System.Linq.Expressions.NewArrayExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack,PCI.Framework.ORM.DapperExtensions.LambdaExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.NewExpressionResolve">
            <summary>
            表示一个构造函数调用
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.NewExpressionResolve.Update(System.Linq.Expressions.NewExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.NewExpressionResolve.Insert(System.Linq.Expressions.NewExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.NewExpressionResolve.Select(System.Linq.Expressions.NewExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.NewExpressionResolve.GroupBy(System.Linq.Expressions.NewExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.NewExpressionResolve.OrderBy(System.Linq.Expressions.NewExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack,PCI.Framework.ORM.DapperExtensions.LambdaExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ParameterExpressionResolve">
            <summary>
            表示命名参数表达式
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ParameterExpressionResolve.Select(System.Linq.Expressions.ParameterExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.UnaryExpressionResolve">
            <summary>
            表示具有一元运算符的表达式
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.UnaryExpressionResolve.Select(System.Linq.Expressions.UnaryExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.UnaryExpressionResolve.Insert(System.Linq.Expressions.UnaryExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.UnaryExpressionResolve.Update(System.Linq.Expressions.UnaryExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.UnaryExpressionResolve.Where(System.Linq.Expressions.UnaryExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.UnaryExpressionResolve.GroupBy(System.Linq.Expressions.UnaryExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.UnaryExpressionResolve.OrderBy(System.Linq.Expressions.UnaryExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack,PCI.Framework.ORM.DapperExtensions.LambdaExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.UnaryExpressionResolve.Max(System.Linq.Expressions.UnaryExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Max
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.UnaryExpressionResolve.Min(System.Linq.Expressions.UnaryExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Min
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.UnaryExpressionResolve.Avg(System.Linq.Expressions.UnaryExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Avg
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.UnaryExpressionResolve.Count(System.Linq.Expressions.UnaryExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Count
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.UnaryExpressionResolve.Sum(System.Linq.Expressions.UnaryExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Sum
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.UnaryExpressionResolve.Join(System.Linq.Expressions.UnaryExpression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Join
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ISqlBuilder">
            <summary>
            ISqlBuilder
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ISqlBuilder.Update(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ISqlBuilder.Insert(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ISqlBuilder.Select(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ISqlBuilder.Join(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Join
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ISqlBuilder.Where(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ISqlBuilder.In(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            In
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ISqlBuilder.GroupBy(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ISqlBuilder.OrderBy(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack,PCI.Framework.ORM.DapperExtensions.LambdaExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序类型</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ISqlBuilder.Max(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Max
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ISqlBuilder.Min(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Min
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ISqlBuilder.Avg(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Avg
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ISqlBuilder.Count(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Count
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.ISqlBuilder.Sum(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Sum
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1">
            <summary>
            抽象基类
            </summary>
            <typeparam name="T">泛型类型</typeparam>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Update(`0,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Insert(`0,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Select(`0,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Join(`0,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Join
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Where(`0,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.In(`0,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            In
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.GroupBy(`0,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.OrderBy(`0,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack,PCI.Framework.ORM.DapperExtensions.LambdaExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Max(`0,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Max
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Min(`0,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Min
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Avg(`0,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Avg
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Count(`0,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Count
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Sum(`0,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Sum
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Update(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Insert(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Select(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Join(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Join
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Where(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.In(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            In
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.GroupBy(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.OrderBy(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack,PCI.Framework.ORM.DapperExtensions.LambdaExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Max(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Max
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Min(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Min
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Avg(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Avg
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Count(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Count
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.BaseSqlBuilder`1.Sum(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Sum
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <returns>SqlPack</returns>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder">
            <summary>
            SqlBuilder
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.DatabaseType">
            <summary>
            数据库类型，必须设置
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.FuncGetTableName">
            <summary>
            获取表名,参数：实体类型。
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.FuncGetColumnName">
            <summary>
            获取列名，参数：实体类型，字段名
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.SqlIntercept">
            <summary>
            lishuangquan 加入全局SQL拦截，方便对SQL的监控与操作
            ORACLE数据库要设置默认的拦截器，使SQL语句变为大写
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.GetSqlBuilderCore``1">
            <summary>
            获取SQLBuilder
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.Insert``1(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Boolean)">
            <summary>
            Insert
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="expression">表达式树</param>
            <param name="isEnableNullValue">是否对null值属性进行sql拼接操作，默认：是</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.Delete``1">
            <summary>
            Delete
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.Update``1(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Boolean)">
            <summary>
            Update
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="expression">表达式树</param>
            <param name="isEnableNullValue">是否对null值属性进行sql拼接操作，默认：是</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.Select``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.Select``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.Select``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.Select``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.Select``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.Select``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.Select``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.Select``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.Select``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <typeparam name="T10">泛型类型10</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.Max``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Max
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.Min``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Min
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.Avg``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Avg
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Count
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilder.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Sum
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1">
            <summary>
            SqlBuilderCore
            </summary>
            <typeparam name="T">泛型类型</typeparam>
        </member>
        <member name="F:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1._sqlPack">
            <summary>
            _sqlPack
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.SqlIntercept">
            <summary>
            SQL拦截委托
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Sql">
            <summary>
            SQL语句
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Parameters">
            <summary>
            SQL格式化参数
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.DbParameters">
            <summary>
            SQL格式化参数
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.#ctor(PCI.Framework.ORM.ConnectType,System.Func{System.Type,System.String},System.Func{System.Type,System.String,System.String})">
            <summary>
            SqlBuilderCore
            </summary>
            <param name="dbType">数据库类型</param>
            <param name="funcGetTableName">获取表名委托</param>
            <param name="funcGetColumnName">获取列名委托</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.SelectParser(System.Type[])">
            <summary>
            SelectParser
            </summary>
            <param name="array">可变数量参数</param>
            <returns>string</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.GetColumnMapping(System.Type)">
            <summary>
            根据ClassMapper中设置的类型，实体类属性名与数据库列明的映射关系
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Select``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Select``3(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Select``4(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Select``5(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Select``6(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Select``7(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Select``8(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Select``9(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Object}})">
            <summary>
            Select
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <typeparam name="T4">泛型类型4</typeparam>
            <typeparam name="T5">泛型类型5</typeparam>
            <typeparam name="T6">泛型类型6</typeparam>
            <typeparam name="T7">泛型类型7</typeparam>
            <typeparam name="T8">泛型类型8</typeparam>
            <typeparam name="T9">泛型类型9</typeparam>
            <typeparam name="T10">泛型类型10</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.JoinParser``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},System.String)">
            <summary>
            JoinParser
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <param name="leftOrRightJoin">左连接或者右连接</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.JoinParser2``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.String)">
            <summary>
            JoinParser2
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <param name="leftOrRightJoin">左连接或者右连接</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Join``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Join
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Join``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Join
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.InnerJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            InnerJoin
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.InnerJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            InnerJoin
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            LeftJoin
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.LeftJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            LeftJoin
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            RightJoin
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.RightJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            RightJoin
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.FullJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            FullJoin
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.FullJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            FullJoin
            </summary>
            <typeparam name="T2">泛型类型2</typeparam>
            <typeparam name="T3">泛型类型3</typeparam>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            多表查询的Where语句
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.AndWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            AndWhere
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.AndWhere``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            多表的AndWhere查询
            </summary>
            <typeparam name="T2"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.OrWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            OrWhere
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.OrWhere``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            OrWhere
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.WithKey(`0)">
            <summary>
            添加主键条件，主要针对更新实体和删除实体操作
            </summary>
            <param name="entity">实体对象</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.WithKey(System.Object[])">
            <summary>
            添加主键条件，主要针对更新实体和删除实体操作
            </summary>
            <param name="keyValue">主键值</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.GroupBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.OrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},PCI.Framework.ORM.DapperExtensions.LambdaExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="orders">排序方式</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},PCI.Framework.ORM.DapperExtensions.LambdaExtension.OrderType[])">
            <summary>
            多表查询的OrderBy
            </summary>
            <param name="expression"></param>
            <param name="orders"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Page(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Page
            </summary>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <param name="orderField">排序字段</param>
            <param name="sql">自定义sql语句</param>
            <param name="parameters">自定义sql格式化参数</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.PageByWith(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            PageByWith
            </summary>
            <param name="pageSize">每页数量</param>
            <param name="pageIndex">当前页码</param>
            <param name="orderField">排序字段</param>
            <param name="sql">自定义sql语句</param>
            <param name="parameters">自定义sql格式化参数</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Delete">
            <summary>
            Delete
            </summary>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Update(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Boolean)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="isEnableNullValue">是否对null值属性进行sql拼接操作，默认：是</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Insert(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Boolean)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="isEnableNullValue">是否对null值属性进行sql拼接操作，默认：是</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Max(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Max
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Min(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Min
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Avg(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Avg
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Count
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Sum
            </summary>
            <param name="expression">表达式树</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Top(System.Int64)">
            <summary>
            Top
            </summary>
            <param name="topNumber">top数量</param>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.Distinct">
            <summary>
            Distinct
            </summary>
            <returns>SqlBuilderCore</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.GetTableName">
            <summary>
            获取实体对应的表名
            </summary>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderCore`1.GetPrimaryKey">
            <summary>
            获取实体对应表的主键名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.OrderType">
            <summary>
            排序方式
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.DapperExtensions.LambdaExtension.OrderType.Ascending">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.DapperExtensions.LambdaExtension.OrderType.Descending">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions">
            <summary>
            扩展类
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.Like(System.Object,System.String)">
            <summary>
            LIKE
            </summary>
            <param name="this">扩展对象自身</param>
            <param name="value">包含的字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.LikeLeft(System.Object,System.String)">
            <summary>
            LIKE '% _ _ _'
            </summary>
            <param name="this">扩展对象自身</param>
            <param name="value">包含的字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.LikeRight(System.Object,System.String)">
            <summary>
            LIKE '_ _ _ %'
            </summary>
            <param name="this">扩展对象自身</param>
            <param name="value">包含的字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.NotLike(System.Object,System.String)">
            <summary>
            NOT LIKE
            </summary>
            <param name="this">扩展对象自身</param>
            <param name="value">包含的字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.In``1(System.Object,``0[])">
            <summary>
            IN
            </summary>
            <typeparam name="T">IN数组里面的数据类型</typeparam>
            <param name="this">扩展对象自身</param>
            <param name="array">IN数组</param>
            <returns>bool</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.NotIn``1(System.Object,``0[])">
            <summary>
            NOT IN
            </summary>
            <typeparam name="T">NOT IN数组里面的数据类型</typeparam>
            <param name="this">扩展对象自身</param>
            <param name="array">NOT IN数组</param>
            <returns>bool</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.True``1">
            <summary>
            True
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.False``1">
            <summary>
            False
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Or
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            And
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToLambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            ToLambda
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToObject(System.Linq.Expressions.Expression)">
            <summary>
            转换Expression为object
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.OrderBy``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            linq正序排序扩展
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.OrderByDescending``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            linq倒叙排序扩展
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            linq正序多列排序扩展
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ThenByDescending``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            linq倒序多列排序扩展
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.BuildIOrderedQueryable``1(System.Linq.IQueryable{``0},System.String,System.String)">
            <summary>
            根据属性和排序方法构建IOrderedQueryable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="property"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.Substring(System.String,System.String,System.Boolean)">
            <summary>
            从分隔符开始向尾部截取字符串
            </summary>
            <param name="this">源字符串</param>
            <param name="separator">分隔符</param>
            <param name="lastIndexOf">true：从最后一个匹配的分隔符开始截取，false：从第一个匹配的分隔符开始截取，默认：true</param>
            <returns>string</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.GetCoreType(System.Type)">
            <summary>
            如果type是Nullable类型则返回UnderlyingType，否则则直接返回type本身
            </summary>
            <param name="this">类型</param>
            <returns>Type</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.IsNullable(System.Type)">
            <summary>
            判断类型是否是Nullable类型
            </summary>
            <param name="this">类型</param>
            <returns>bool</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.IsNull(System.Object)">
            <summary>
            是否为空
            </summary>
            <param name="this">object对象</param>
            <returns>bool</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.IsNullOrEmpty(System.String)">
            <summary>
            判断字符串是否为空
            </summary>
            <param name="this">待验证的字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            判断字符串是否为空
            </summary>
            <param name="this">待验证的字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToSafeValue(System.Object,System.Type)">
            <summary>
            转换为安全类型的值
            </summary>
            <param name="this">object对象</param>
            <param name="type">type</param>
            <returns>object</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToDbParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Common.DbCommand)">
            <summary>
            An IDictionary&lt;string,object&gt; extension method that converts this object to a database parameters.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="command">The command.</param>
            <returns>The given data converted to a DbParameter[].</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToDbParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Common.DbConnection)">
            <summary>
             An IDictionary&lt;string,object&gt; extension method that converts this object to a database parameters.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="connection">The connection.</param>        
            <returns>The given data converted to a DbParameter[].</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToSqlParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            An IDictionary&lt;string,object&gt; extension method that converts the @this to a SQL parameters.
            </summary>
            <param name="this">The @this to act on.</param>        
            <returns>@this as a SqlParameter[].</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToMySqlParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            An IDictionary&lt;string,object&gt; extension method that converts the @this to a MySQL parameters.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a MySqlParameter[].</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToOracleParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            An IDictionary&lt;string,object&gt; extension method that converts the @this to a Oracle parameters.
            </summary>
            <param name="this">The @this to act on.</param>        
            <returns>@this as a OracleParameter[].</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToDmParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            An IDictionary&lt;string,object&gt; extension method that converts the @this to a Dm parameters.
            </summary>
            <param name="this">The @this to act on.</param>        
            <returns>@this as a DmParameter[].</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToGBaseParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            An IDictionary&lt;string,object&gt; extension method that converts the @this to a Dm parameters.
            </summary>
            <param name="this">The @this to act on.</param>        
            <returns>@this as a DmParameter[].</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToDataTable(System.Data.IDataReader)">
            <summary>
            IDataReader转换为DataTable
            </summary>
            <param name="this">reader数据源</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
            List集合转DataTable
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="this">list数据源</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToDataSet(System.Data.IDataReader)">
            <summary>
            IDataReader转换为DataSet
            </summary>
            <param name="this">reader数据源</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToDynamic(System.Data.IDataReader)">
            <summary>
            IDataReader数据转为dynamic对象
            </summary>
            <param name="this">IDataReader数据源</param>
            <returns>dynamic</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToDynamics(System.Data.IDataReader)">
            <summary>
            IDataReader数据转为dynamic对象集合
            </summary>
            <param name="this">IDataReader数据源</param>
            <returns>dynamic集合</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToDictionary(System.Data.IDataReader)">
            <summary>
            IDataReader数据转为Dictionary对象
            </summary>
            <param name="this">IDataReader数据源</param>
            <returns>Dictionary</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToDictionaries(System.Data.IDataReader)">
            <summary>
            IDataReader数据转为Dictionary对象集合
            </summary>
            <param name="this">IDataReader数据源</param>
            <returns>Dictionary集合</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToEntity``1(System.Data.IDataReader)">
            <summary>
            IDataReader数据转为强类型实体
            </summary>
            <param name="this">IDataReader数据源</param>
            <returns>强类型实体</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToEntities``1(System.Data.IDataReader)">
            <summary>
            IDataReader数据转为强类型实体集合
            </summary>
            <param name="this">IDataReader数据源</param>
            <returns>强类型实体集合</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToList``1(System.Data.IDataReader)">
            <summary>
            IDataReader转换为T集合
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="this">IDataReader数据源</param>
            <returns>T类型集合</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToLists``1(System.Data.IDataReader)">
            <summary>
            IDataReader转换为T集合的集合
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="this">IDataReader数据源</param>
            <returns>T类型集合的集合</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ToFirstOrDefault``1(System.Data.IDataReader)">
            <summary>
            IDataReader转换为T类型对象
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="this">IDataReader数据源</param>
            <returns>T类型对象</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.IsSqlInject(System.String,System.String)">
            <summary>
            判断是否sql注入
            </summary>
            <param name="this">sql字符串</param>
            <param name="pattern">正则表达式</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ReplaceSqlWithRegex(System.String,System.String)">
            <summary>
            正则表达式替换sql
            </summary>
            <param name="this">sql字符串</param>
            <param name="pattern">正则表达式</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.Contains(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            正则判断是否包含目标字符串
            </summary>
            <param name="this">源字符串</param>
            <param name="value">目标字符串，例如：判断是否包含ASC或DESC为@"(/\*(?:|)*?\*/)|(\b(ASC|DESC)\b)"</param>
            <param name="options">匹配模式</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            获取首个指定特性
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            获取指定特性集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.GetFirstOrDefaultAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            获取首个指定特性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.Extensions.ContainsAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            是否包含指定特性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderProvider">
            <summary>
            SqlBuilderProvider
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderProvider.GetExpressionResolve(System.Linq.Expressions.Expression)">
            <summary>
            GetExpressionResolve
            </summary>
            <param name="expression">表达式树</param>
            <returns>ISqlBuilder</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderProvider.Update(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Update
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderProvider.Insert(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Insert
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderProvider.Select(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Select
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderProvider.Join(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Join
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderProvider.Where(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Where
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderProvider.In(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            In
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderProvider.GroupBy(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            GroupBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderProvider.OrderBy(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack,PCI.Framework.ORM.DapperExtensions.LambdaExtension.OrderType[])">
            <summary>
            OrderBy
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
            <param name="orders">排序方式</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderProvider.Max(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Max
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderProvider.Min(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Min
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderProvider.Avg(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Avg
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderProvider.Count(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Count
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlBuilderProvider.Sum(System.Linq.Expressions.Expression,PCI.Framework.ORM.DapperExtensions.LambdaExtension.SqlPack)">
            <summary>
            Sum
            </summary>
            <param name="expression">表达式树</param>
            <param name="sqlPack">sql打包对象</param>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.Mapper.AutoClassMapper`1">
            <summary>
            Automatically maps an entity to a table using a combination of reflection and naming conventions for keys.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.Mapper.AutoClassMapper`1.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.Mapper.ClassMapper`1">
            <summary>
            Maps an entity to a table through a collection of property maps.
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.Mapper.ClassMapper`1.SchemaName">
            <summary>
            Gets or sets the schema to use when referring to the corresponding table name in the database.
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.Mapper.ClassMapper`1.TableName">
            <summary>
            Gets or sets the table to use in the database.
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.Mapper.ClassMapper`1.Properties">
            <summary>
            A collection of properties that will map to columns in the database table.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.Mapper.ClassMapper`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Fluently, maps an entity property to a column
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.Mapper.ClassMapper`1.Map(System.Reflection.PropertyInfo)">
            <summary>
            Fluently, maps an entity property to a column
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.Mapper.ClassMapper`1.UnMap(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Removes a propertymap entry
            </summary>
            <param name="expression"></param>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.Mapper.PluralizedAutoClassMapper`1">
            <summary>
            Automatically maps an entity to a table using a combination of reflection and naming conventions for keys. 
            Identical to AutoClassMapper, but attempts to pluralize table names automatically.
            Example: Person entity maps to People table
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.Mapper.IPropertyMap">
            <summary>
            Maps an entity property to its corresponding column in the database.
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.Mapper.PropertyMap">
            <summary>
            Maps an entity property to its corresponding column in the database.
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.Mapper.PropertyMap.Name">
            <summary>
            Gets the name of the property by using the specified propertyInfo.
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.Mapper.PropertyMap.ColumnName">
            <summary>
            Gets the column name for the current property.
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.Mapper.PropertyMap.KeyType">
            <summary>
            Gets the key type for the current property.
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.Mapper.PropertyMap.Ignored">
            <summary>
            Gets the ignore status of the current property. If ignored, the current property will not be included in queries.
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.Mapper.PropertyMap.IsReadOnly">
            <summary>
            Gets the read-only status of the current property. If read-only, the current property will not be included in INSERT and UPDATE queries.
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.DapperExtensions.Mapper.PropertyMap.PropertyInfo">
            <summary>
            Gets the property info for the current property.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.Mapper.PropertyMap.Column(System.String)">
            <summary>
            Fluently sets the column name for the property.
            </summary>
            <param name="columnName">The column name as it exists in the database.</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.Mapper.PropertyMap.Key(PCI.Framework.ORM.DapperExtensions.Mapper.KeyType)">
            <summary>
            Fluently sets the key type of the property.
            </summary>
            <param name="columnName">The column name as it exists in the database.</param>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.Mapper.PropertyMap.Ignore">
            <summary>
            Fluently sets the ignore status of the property.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.Mapper.PropertyMap.ReadOnly">
            <summary>
            Fluently sets the read-only status of the property.
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.Mapper.KeyType">
            <summary>
            Used by ClassMapper to determine which entity property represents the key.
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.DapperExtensions.Mapper.KeyType.NotAKey">
            <summary>
            The property is not a key and is not automatically managed.
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.DapperExtensions.Mapper.KeyType.Identity">
            <summary>
            The property is an integery-based identity generated from the database.
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.DapperExtensions.Mapper.KeyType.TriggerIdentity">
            <summary>
            The property is an identity generated by the database trigger.
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.DapperExtensions.Mapper.KeyType.Guid">
            <summary>
            The property is a Guid identity which is automatically managed.
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.DapperExtensions.Mapper.KeyType.Assigned">
            <summary>
            The property is a key that is not automatically managed.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.Predicates.Field``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},PCI.Framework.ORM.DapperExtensions.Operator,System.Object,System.Boolean)">
            <summary>
            Factory method that creates a new IFieldPredicate predicate: [FieldName] [Operator] [Value]. 
            Example: WHERE FirstName = 'Foo'
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="expression">An expression that returns the left operand [FieldName].</param>
            <param name="op">The comparison operator.</param>
            <param name="value">The value for the predicate.</param>
            <param name="not">Effectively inverts the comparison operator. Example: WHERE FirstName &lt;&gt; 'Foo'.</param>
            <returns>An instance of IFieldPredicate.</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.Predicates.Property``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},PCI.Framework.ORM.DapperExtensions.Operator,System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Boolean)">
            <summary>
            Factory method that creates a new IPropertyPredicate predicate: [FieldName1] [Operator] [FieldName2]
            Example: WHERE FirstName = LastName
            </summary>
            <typeparam name="T">The type of the entity for the left operand.</typeparam>
            <typeparam name="T2">The type of the entity for the right operand.</typeparam>
            <param name="expression">An expression that returns the left operand [FieldName1].</param>
            <param name="op">The comparison operator.</param>
            <param name="expression2">An expression that returns the right operand [FieldName2].</param>
            <param name="not">Effectively inverts the comparison operator. Example: WHERE FirstName &lt;&gt; LastName </param>
            <returns>An instance of IPropertyPredicate.</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.Predicates.Group(PCI.Framework.ORM.DapperExtensions.GroupOperator,PCI.Framework.ORM.DapperExtensions.IPredicate[])">
            <summary>
            Factory method that creates a new IPredicateGroup predicate.
            Predicate groups can be joined together with other predicate groups.
            </summary>
            <param name="op">The grouping operator to use when joining the predicates (AND / OR).</param>
            <param name="predicate">A list of predicates to group.</param>
            <returns>An instance of IPredicateGroup.</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.Predicates.Exists``1(PCI.Framework.ORM.DapperExtensions.IPredicate,System.Boolean)">
            <summary>
            Factory method that creates a new IExistsPredicate predicate.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.Predicates.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},PCI.Framework.ORM.DapperExtensions.BetweenValues,System.Boolean)">
            <summary>
            Factory method that creates a new IBetweenPredicate predicate. 
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.DapperExtensions.Predicates.Sort``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Factory method that creates a new Sort which controls how the results will be sorted.
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.Operator">
            <summary>
            Comparison operator for predicates.
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.DapperExtensions.Operator.Eq">
            <summary>
            Equal to
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.DapperExtensions.Operator.Gt">
            <summary>
            Greater than
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.DapperExtensions.Operator.Ge">
            <summary>
            Greater than or equal to
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.DapperExtensions.Operator.Lt">
            <summary>
            Less than
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.DapperExtensions.Operator.Le">
            <summary>
            Less than or equal to
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.DapperExtensions.Operator.Like">
            <summary>
            Like (You can use % in the value to do wilcard searching)
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.PredicateGroup">
            <summary>
            Groups IPredicates together using the specified group operator.
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.DapperExtensions.GroupOperator">
            <summary>
            Operator to use when joining predicates in a PredicateGroup.
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.CommandDefinition">
            <summary>
            Represents the key aspects of a sql operation
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.CommandDefinition.CommandText">
            <summary>
            The command (sql or a stored-procedure name) to execute
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.CommandDefinition.Parameters">
            <summary>
            The parameters associated with the command
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.CommandDefinition.Transaction">
            <summary>
            The active transaction for the command
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.CommandDefinition.CommandTimeout">
            <summary>
            The effective timeout for the command
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.CommandDefinition.CommandType">
            <summary>
            The type of command that the command-text represents
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.CommandDefinition.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.CommandDefinition.AddToCache">
            <summary>
            Should the plan for this query be cached?
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.CommandDefinition.Flags">
            <summary>
            Additional state flags against this command
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.CommandDefinition.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.CommandDefinition.#ctor(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},PCI.Framework.ORM.Dapper.CommandFlags)">
            <summary>
            Initialize the command definition
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.CommandFlags">
            <summary>
            Additional state flags that control command behaviour
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.Dapper.CommandFlags.None">
            <summary>
            No additional flags
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.Dapper.CommandFlags.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.Dapper.CommandFlags.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.Dapper.CommandFlags.NoCache">
            <summary>
            Should the plan cache be bypassed?
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.CustomPropertyTypeMap">
            <summary>
            Implements custom property mapping by user provided criteria (usually presence of some custom attribute with column to member mapping)
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.CustomPropertyTypeMap.#ctor(System.Type,System.Func{System.Type,System.String,System.Reflection.PropertyInfo})">
            <summary>
            Creates custom property mapping
            </summary>
            <param name="type">Target entity type</param>
            <param name="propertySelector">Property selector based on target type and DataReader column name</param>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.CustomPropertyTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Always returns default constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Default constructor</returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.CustomPropertyTypeMap.FindExplicitConstructor">
            <summary>
            Always returns null
            </summary>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.CustomPropertyTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Not implemented as far as default constructor used for all cases
            </summary>
            <param name="constructor"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.CustomPropertyTypeMap.GetMember(System.String)">
            <summary>
            Returns property based on selector strategy
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Poperty member map</returns>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.DbString">
            <summary>
            This class represents a SQL string, it can be used if you need to denote your parameter is a Char vs VarChar vs nVarChar vs nChar
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.DbString.IsAnsiDefault">
            <summary>
            Default value for IsAnsi.
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.Dapper.DbString.DefaultLength">
            <summary>
            A value to set the default value of strings
            going through Dapper. Default is 4000, any value larger than this
            field will not have the default value applied.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.DbString.#ctor">
            <summary>
            Create a new DbString
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.DbString.IsAnsi">
            <summary>
            Ansi vs Unicode 
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.DbString.IsFixedLength">
            <summary>
            Fixed length 
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.DbString.Length">
            <summary>
            Length of the string -1 for max
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.DbString.Value">
            <summary>
            The value of the string
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.DbString.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter to the command... internal use only
            </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.DefaultTypeMap">
            <summary>
            Represents default type mapping strategy used by Dapper
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.DefaultTypeMap.#ctor(System.Type)">
            <summary>
            Creates default type map
            </summary>
            <param name="type">Entity type</param>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.DefaultTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.DefaultTypeMap.FindExplicitConstructor">
            <summary>
            Returns the constructor, if any, that has the ExplicitConstructorAttribute on it.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.DefaultTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.DefaultTypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.DefaultTypeMap.MatchNamesWithUnderscores">
            <summary>
            Should column names like User_Id be allowed to match properties/fields like UserId ?
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.DefaultTypeMap.Properties">
            <summary>
            The settable properties for this typemap
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.DynamicParameters.#ctor">
            <summary>
            construct a dynamic parameter bag
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.DynamicParameters.#ctor(System.Object)">
            <summary>
            construct a dynamic parameter bag
            </summary>
            <param name="template">can be an anonymous type or a DynamicParameters bag</param>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.DynamicParameters.AddDynamicParams(System.Object)">
            <summary>
            Append a whole object full of params to the dynamic
            EG: AddDynamicParams(new {A = 1, B = 2}) // will add property A and B to the dynamic
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.DynamicParameters.RemoveUnused">
            <summary>
            If true, the command-text is inspected and only values that are clearly used are included on the connection
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.DynamicParameters.AddParameters(System.Data.IDbCommand,PCI.Framework.ORM.Dapper.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.DynamicParameters.ParameterNames">
            <summary>
            All the names of the param in the bag, use Get to yank them out
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.DynamicParameters.Get``1(System.String)">
            <summary>
            Get the value of a parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns>The value, note DBNull.Value is not returned, instead the value is returned as null</returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.DynamicParameters.Output``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Data.DbType},System.Nullable{System.Int32})">
            <summary>
            Allows you to automatically populate a target property/field from output parameters. It actually
            creates an InputOutput parameter, so you can still pass data in.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The object whose property/field you wish to populate.</param>
            <param name="expression">A MemberExpression targeting a property/field of the target (or descendant thereof.)</param>
            <param name="dbType"></param>
            <param name="size">The size to set on the parameter. Defaults to 0, or DbString.DefaultLength in case of strings.</param>
            <returns>The DynamicParameters instance</returns>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.ExplicitConstructorAttribute">
            <summary>
            Tell Dapper to use an explicit constructor, passing nulls or 0s for all parameters
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.FeatureSupport">
            <summary>
            Handles variances in features per DBMS
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.FeatureSupport.Get(System.Data.IDbConnection)">
            <summary>
            Gets the feature set based on the passed connection
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.FeatureSupport.Arrays">
            <summary>
            True if the db supports array columns e.g. Postgresql
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.SimpleMemberMap">
            <summary>
            Represents simple member map for one of target parameter or property or field to source DataReader column
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Creates instance for simple property mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="property">Target property</param>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.FieldInfo)">
            <summary>
            Creates instance for simple field mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="field">Target property</param>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.ParameterInfo)">
            <summary>
            Creates instance for simple constructor parameter mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="parameter">Target constructor parameter</param>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SimpleMemberMap.ColumnName">
            <summary>
            DataReader column name
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SimpleMemberMap.MemberType">
            <summary>
            Target member type
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SimpleMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SimpleMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SimpleMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.SqlDataRecordListTVPParameter">
            <summary>
            Used to pass a IEnumerable&lt;SqlDataRecord&gt; as a SqlDataRecordListTVPParameter
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlDataRecordListTVPParameter.#ctor(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Server.SqlDataRecord},System.String)">
            <summary>
            Create a new instance of SqlDataRecordListTVPParameter
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SqlMapper.IsIgnoreDynamicCase">
            <summary>
            20200602 li 加入动态类型取值时的大小写判断开关,默认为忽略大小写
            </summary>
        </member>
        <member name="E:PCI.Framework.ORM.Dapper.SqlMapper.QueryCachePurged">
            <summary>
            Called if the query cache is purged via PurgeQueryCache
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.PurgeQueryCache">
            <summary>
            Purge the query cache
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GetCachedSQLCount">
            <summary>
            Return a count of all the cached queries by dapper
            </summary>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GetCachedSQL(System.Int32)">
            <summary>
            Return a list of all the queries cached by dapper
            </summary>
            <param name="ignoreHitCountAbove"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GetHashCollissions">
            <summary>
            Deep diagnostics only: find any hash collisions in the cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.ResetTypeHandlers">
            <summary>
            Clear the registered type handlers
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.AddTypeMap(System.Type,System.Data.DbType)">
            <summary>
            Configure the specified type to be mapped to a given db-type
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.AddTypeHandler(System.Type,PCI.Framework.ORM.Dapper.SqlMapper.ITypeHandler)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.AddTypeHandlerImpl(System.Type,PCI.Framework.ORM.Dapper.SqlMapper.ITypeHandler,System.Boolean)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.AddTypeHandler``1(PCI.Framework.ORM.Dapper.SqlMapper.TypeHandler{``0})">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GetDbType(System.Object)">
            <summary>
            Get the DbType that maps to a given value
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.LookupDbType(System.Type,System.String,System.Boolean,PCI.Framework.ORM.Dapper.SqlMapper.ITypeHandler@)">
            <summary>
            OBSOLETE: For internal usage only. Lookup the DbType and handler for a given Type and member
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Obtains the data as a list; if it is *already* a list, the original object is returned without
            any duplication; otherwise, ToList() is invoked.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Execute(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Execute(System.Data.IDbConnection,PCI.Framework.ORM.Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.ExecuteScalar(System.Data.IDbConnection,PCI.Framework.ORM.Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,PCI.Framework.ORM.Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            DataTable table = new DataTable("MyTable");
            using (var reader = ExecuteReader(cnn, sql, param))
            {
                table.Load(reader);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,PCI.Framework.ORM.Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,PCI.Framework.ORM.Dapper.CommandDefinition,System.Data.CommandBehavior)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Query(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a sequence of dynamic objects with properties matching the columns
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.QueryFirst(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.QueryFirstOrDefault(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.QuerySingle(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.QuerySingleOrDefault(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.QueryFirst``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.QueryFirstOrDefault``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.QuerySingle``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.QuerySingleOrDefault``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Query(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.QueryFirst(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.QueryFirstOrDefault(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.QuerySingle(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.QuerySingleOrDefault(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Query``1(System.Data.IDbConnection,PCI.Framework.ORM.Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.QueryFirst``1(System.Data.IDbConnection,PCI.Framework.ORM.Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A single instance or null of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.QueryFirstOrDefault``1(System.Data.IDbConnection,PCI.Framework.ORM.Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A single or null instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.QuerySingle``1(System.Data.IDbConnection,PCI.Framework.ORM.Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A single instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.QuerySingleOrDefault``1(System.Data.IDbConnection,PCI.Framework.ORM.Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A single instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.QueryMultiple(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.QueryMultiple(System.Data.IDbConnection,PCI.Framework.ORM.Dapper.CommandDefinition)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Query``3(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst">The first type in the record set</typeparam>
            <typeparam name="TSecond">The second type in the record set</typeparam>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Query``4(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Query``5(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 4 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Query``6(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 5 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Query``7(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 6 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Query``8(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 7 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TSeventh"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Type[],System.Func{System.Object[],``0},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with arbitrary input parameters
            </summary>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="types">array of types in the record set</param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.ReadChar(System.Object)">
            <summary>
            Internal use only
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.ReadNullableChar(System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.FindOrAddParameter(System.Data.IDataParameterCollection,System.Data.IDbCommand,System.String)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.PackListParameters(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.SanitizeParameterValue(System.Object)">
            <summary>
            OBSOLETE: For internal usage only. Sanitizes the paramter value with proper type casting.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.ReplaceLiterals(PCI.Framework.ORM.Dapper.SqlMapper.IParameterLookup,System.Data.IDbCommand)">
            <summary>
            Replace all literal tokens with their text form
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Format(System.Object)">
            <summary>
            Convert numeric values to their string form for SQL literal purposes
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.CreateParamInfoGenerator(PCI.Framework.ORM.Dapper.SqlMapper.Identity,System.Boolean,System.Boolean)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.Dapper.SqlMapper.TypeMapProvider">
            <summary>
            Gets type-map for the given type
            </summary>
            <returns>Type map instance, default is to create new instance of DefaultTypeMap</returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GetTypeMap(System.Type)">
            <summary>
            Gets type-map for the given type
            </summary>
            <returns>Type map implementation, DefaultTypeMap instance if no override present</returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.SetTypeMap(System.Type,PCI.Framework.ORM.Dapper.SqlMapper.ITypeMap)">
            <summary>
            Set custom mapping for type deserializers
            </summary>
            <param name="type">Entity type to override</param>
            <param name="map">Mapping rules impementation, null to remove custom map</param>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GetTypeDeserializer(System.Type,System.Data.IDataReader,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Internal use only
            </summary>
            <param name="type"></param>
            <param name="reader"></param>
            <param name="startBound"></param>
            <param name="length"></param>
            <param name="returnNullIfFirstMissing"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.ThrowDataException(System.Exception,System.Int32,System.Data.IDataReader,System.Object)">
            <summary>
            Throws a data exception, only used internally
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SqlMapper.ConnectionStringComparer">
            <summary>
            How should connection strings be compared for equivalence? Defaults to StringComparer.Ordinal.
            Providing a custom implementation can be useful for allowing multi-tenancy databases with identical
            schema to share strategies. Note that usual equivalence rules apply: any equivalent connection strings
            <b>MUST</b> yield the same hash-code.
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.Dapper.SqlMapper.DataTableTypeNameKey">
            <summary>
            Key used to indicate the type name associated with a DataTable
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.AsTableValuedParameter(System.Data.DataTable,System.String)">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.SetTypeName(System.Data.DataTable,System.String)">
            <summary>
            Associate a DataTable with a type name
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GetTypeName(System.Data.DataTable)">
            <summary>
            Fetch the type name associated with a DataTable
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.AsTableValuedParameter(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Server.SqlDataRecord},System.String)">
            <summary>
            Used to pass a IEnumerable&lt;SqlDataRecord&gt; as a TableValuedParameter
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.DapperTable.TryGetValue(System.String,System.Int32@)">
            <summary>
            20200602 li 从字典中找值，忽略大小写
            </summary>
            <param name="name"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.SqlMapper.DontMap">
            <summary>
            Dummy type for excluding from multi-map
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.SqlMapper.GridReader">
            <summary>
            The grid reader provides interfaces for reading multiple result sets from a Dapper query
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.Read(System.Boolean)">
            <summary>
            Read the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.ReadFirst">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.ReadFirstOrDefault">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.ReadSingle">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.ReadSingleOrDefault">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.Read``1(System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.ReadFirst``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.ReadFirstOrDefault``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.ReadSingle``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.ReadSingleOrDefault``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.Read(System.Type,System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.ReadFirst(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.ReadFirstOrDefault(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.ReadSingle(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.ReadSingleOrDefault(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.Read``3(System.Func{``0,``1,``2},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.Read``4(System.Func{``0,``1,``2,``3},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.Read``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.Read``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.Read``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.Read``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.Read``1(System.Type[],System.Func{System.Object[],``0},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.IsConsumed">
            <summary>
            Has the underlying reader been consumed?
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.Command">
            <summary>
            The command associated with the reader
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GridReader.Dispose">
            <summary>
            Dispose the grid, closing and disposing both the underlying reader and command.
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.SqlMapper.ICustomQueryParameter">
            <summary>
            Implement this interface to pass an arbitrary db specific parameter to Dapper
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.ICustomQueryParameter.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter needed to the command before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="name">Parameter name</param>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Parse``1(System.Data.IDataReader)">
            <summary>
            Parses a data reader to a sequence of data of the supplied type. Used for deserializing a reader without a connection, etc.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Parse(System.Data.IDataReader,System.Type)">
            <summary>
            Parses a data reader to a sequence of data of the supplied type (as object). Used for deserializing a reader without a connection, etc.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Parse(System.Data.IDataReader)">
            <summary>
            Parses a data reader to a sequence of dynamic. Used for deserializing a reader without a connection, etc.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GetRowParser(System.Data.IDataReader,System.Type,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the row parser for a specific row on a data reader. This allows for type switching every row based on, for example, a TypeId column.
            You could return a collection of the base type but have each more specific.
            </summary>
            <param name="reader">The data reader to get the parser for the current row from</param>
            <param name="type">The type to get the parser for</param>
            <param name="startIndex">The start column index of the object (default 0)</param>
            <param name="length">The length of columns to read (default -1 = all fields following startIndex)</param>
            <param name="returnNullIfFirstMissing">Return null if we can't find the first column? (default false)</param>
            <returns>A parser for this specific object from this row.</returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.GetRowParser``1(System.Data.IDataReader,System.Type,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the row parser for a specific row on a data reader. This allows for type switching every row based on, for example, a TypeId column.
            You could return a collection of the base type but have each more specific.
            </summary>
            <param name="reader">The data reader to get the parser for the current row from</param>
            <param name="concreteType">The type to get the parser for</param>
            <param name="startIndex">The start column index of the object (default 0)</param>
            <param name="length">The length of columns to read (default -1 = all fields following startIndex)</param>
            <param name="returnNullIfFirstMissing">Return null if we can't find the first column? (default false)</param>
            <returns>A parser for this specific object from this row.</returns>
            <example>
            var result = new List&lt;BaseType&gt;();
            using (var reader = connection.ExecuteReader(@"
              select 'abc' as Name, 1 as Type, 3.0 as Value
              union all
              select 'def' as Name, 2 as Type, 4.0 as Value"))
            {
                if (reader.Read())
                {
                    var toFoo = reader.GetRowParser&lt;BaseType&gt;(typeof(Foo));
                    var toBar = reader.GetRowParser&lt;BaseType&gt;(typeof(Bar));
                    var col = reader.GetOrdinal("Type");
                    do
                    {
                        switch (reader.GetInt32(col))
                        {
                            case 1:
                                result.Add(toFoo(reader));
                                break;
                            case 2:
                                result.Add(toBar(reader));
                                break;
                        }
                    } while (reader.Read());
                }
            }
             
            abstract class BaseType
            {
                public abstract int Type { get; }
            }
            class Foo : BaseType
            {
                public string Name { get; set; }
                public override int Type =&gt; 1;
            }
            class Bar : BaseType
            {
                public float Value { get; set; }
                public override int Type =&gt; 2;
            }
            </example>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.SqlMapper.Identity">
            <summary>
            Identity of a cached query in Dapper, used for extensibility
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Identity.ForDynamicParameters(System.Type)">
            <summary>
            Create an identity for use with DynamicParameters, internal use only
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Identity.Equals(System.Object)">
             <summary>
            
             </summary>
             <param name="obj"></param>
             <returns></returns>
        </member>
        <member name="F:PCI.Framework.ORM.Dapper.SqlMapper.Identity.sql">
            <summary>
            The sql
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.Dapper.SqlMapper.Identity.commandType">
            <summary>
            The command type
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.Dapper.SqlMapper.Identity.hashCode">
             <summary>
            
             </summary>
        </member>
        <member name="F:PCI.Framework.ORM.Dapper.SqlMapper.Identity.gridIndex">
             <summary>
            
             </summary>
        </member>
        <member name="F:PCI.Framework.ORM.Dapper.SqlMapper.Identity.type">
             <summary>
            
             </summary>
        </member>
        <member name="F:PCI.Framework.ORM.Dapper.SqlMapper.Identity.connectionString">
             <summary>
            
             </summary>
        </member>
        <member name="F:PCI.Framework.ORM.Dapper.SqlMapper.Identity.parametersType">
             <summary>
            
             </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Identity.GetHashCode">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Identity.Equals(PCI.Framework.ORM.Dapper.SqlMapper.Identity)">
            <summary>
            Compare 2 Identity objects
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.SqlMapper.IDynamicParameters">
            <summary>
            Implement this interface to pass an arbitrary db specific set of parameters to Dapper
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.IDynamicParameters.AddParameters(System.Data.IDbCommand,PCI.Framework.ORM.Dapper.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.SqlMapper.IMemberMap">
            <summary>
            Implements this interface to provide custom member mapping
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SqlMapper.IMemberMap.ColumnName">
            <summary>
            Source DataReader column name
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SqlMapper.IMemberMap.MemberType">
            <summary>
             Target member type
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SqlMapper.IMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SqlMapper.IMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SqlMapper.IMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.SqlMapper.IParameterCallbacks">
            <summary>
            Extends IDynamicParameters with facilities for executing callbacks after commands have completed
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.IParameterCallbacks.OnCompleted">
            <summary>
            Invoked when the command has executed
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.SqlMapper.IParameterLookup">
            <summary>
            Extends IDynamicParameters providing by-name lookup of parameter values
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SqlMapper.IParameterLookup.Item(System.String)">
            <summary>
            Get the value of the specified parameter (return null if not found)
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.SqlMapper.ITypeHandler">
            <summary>
            Implement this interface to perform custom type-based parameter handling and value parsing
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.ITypeHandler.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.ITypeHandler.Parse(System.Type,System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <param name="destinationType">The type to parse to</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.SqlMapper.ITypeMap">
            <summary>
            Implement this interface to change default mapping of reader columns to type members
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.ITypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.ITypeMap.FindExplicitConstructor">
            <summary>
            Returns a constructor which should *always* be used.
            
            Parameters will be default values, nulls for reference types and zero'd for value types.
            
            Use this class to force object creation away from parameterless constructors you don't control.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.ITypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.ITypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.SqlMapper.Link`2">
            <summary>
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.SqlMapper.LiteralToken">
            <summary>
            Represents a placeholder for a value that should be replaced as a literal value in the resulting sql
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SqlMapper.LiteralToken.Token">
            <summary>
            The text in the original command that should be replaced
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SqlMapper.LiteralToken.Member">
            <summary>
            The name of the member referred to by the token
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.SqlMapper.Settings">
            <summary>
            Permits specifying certain SqlMapper values globally.
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.Settings.SetDefaults">
            <summary>
            Resets all Settings to their default values
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SqlMapper.Settings.CommandTimeout">
            <summary>
            Specifies the default Command Timeout for all Queries
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SqlMapper.Settings.ApplyNullValues">
            <summary>
            Indicates whether nulls in data are silently ignored (default) vs actively applied and assigned to members
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SqlMapper.Settings.PadListExpansions">
            <summary>
            Should list expansions be padded with null-valued parameters, to prevent query-plan saturation? For example,
            an 'in @foo' expansion with 7, 8 or 9 values will be sent as a list of 10 values, with 3, 2 or 1 of them null.
            The padding size is relative to the size of the list; "next 10" under 150, "next 50" under 500,
            "next 100" under 1500, etc.
            </summary>
            <remarks>
            Caution: this should be treated with care if your DB provider (or the specific configuration) allows for null
            equality (aka "ansi nulls off"), as this may change the intent of your query; as such, this is disabled by 
            default and must be enabled.
            </remarks>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.SqlMapper.Settings.InListStringSplitCount">
            <summary>
            If set (non-negative), when performing in-list expansions of integer types ("where id in @ids", etc), switch to a string_split based
            operation if there are more than this many elements. Note that this feautre requires SQL Server 2016 / compatibility level 130 (or above).
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.SqlMapper.TypeHandler`1">
            <summary>
            Base-class for simple type-handlers
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.TypeHandler`1.SetValue(System.Data.IDbDataParameter,`0)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.TypeHandler`1.Parse(System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.SqlMapper.StringTypeHandler`1">
            <summary>
            Base-class for simple type-handlers that are based around strings
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.StringTypeHandler`1.Parse(System.String)">
            <summary>
            Parse a string into the expected type (the string will never be null)
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.StringTypeHandler`1.Format(`0)">
            <summary>
            Format an instace into a string (the instance will never be null)
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.StringTypeHandler`1.SetValue(System.Data.IDbDataParameter,`0)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.StringTypeHandler`1.Parse(System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.SqlMapper.TypeHandlerCache`1">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.TypeHandlerCache`1.Parse(System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.TypeHandlerCache`1.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.SqlMapper.UdtTypeHandler">
            <summary>
            A type handler for data-types that are supported by the underlying provider, but which need
            a well-known UdtTypeName to be specified
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.SqlMapper.UdtTypeHandler.#ctor(System.String)">
            <summary>
            Creates a new instance of UdtTypeHandler with the specified UdtTypeName
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.TableValuedParameter">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.TableValuedParameter.#ctor(System.Data.DataTable)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Dapper.TableValuedParameter.#ctor(System.Data.DataTable,System.String)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Dapper.IWrappedDataReader">
            <summary>
            Describes a reader that controls the lifetime of both a command and a reader,
            exposing the downstream command/reader as properties.
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.IWrappedDataReader.Reader">
            <summary>
            Obtain the underlying reader
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.Dapper.IWrappedDataReader.Command">
            <summary>
            Obtain the underlying command
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.DAQueryable`1">
            <summary>
            数据可查询的类
            </summary>
            <typeparam name="T">主表对应的实体类型</typeparam>
        </member>
        <member name="M:PCI.Framework.ORM.DAQueryable`1.AndWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            AndWhere对主表的条件
            </summary>
            <param name="andWhere"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAQueryable`1.AndWhere``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            AndWhere对其他表的条件
            </summary>
            <typeparam name="TModel">其他表的类型</typeparam>
            <param name="andWhere">条件</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAQueryable`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            两个表的关联
            </summary>
            <typeparam name="TModel1">与主表关联的其他表对应的实体类型</typeparam>
            <param name="where">关联关系</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAQueryable`1.OrWhere``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            针对其他表的或条件
            </summary>
            <typeparam name="TModel">其他表对应的实体类型</typeparam>
            <param name="orWhere"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAQueryable`1.OrWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            针对主表的或条件
            </summary>
            <param name="orWhere">条件</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAQueryable`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Object}})">
            <summary>
            查询T,TModel1中的列
            </summary>
            <typeparam name="TModel1">其他表对应的实体类型</typeparam>
            <param name="select">要查询的列</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAQueryable`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            查询T中的列，select为空则选取全部列
            </summary>
            <param name="select">要查询的列，若为空，则选取全部列</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAQueryable`1.Select``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Object}})">
            <summary>
            查询T,TModel1, TModel2中的列
            </summary>
            <typeparam name="TModel1">其他表1对应的实体类型</typeparam>
            <typeparam name="TModel2">其他表2对应的实体类型</typeparam>
            <param name="select"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAQueryable`1.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            针对其他表对应的where条件
            </summary>
            <typeparam name="TModel">其他表对应的实体类型</typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAQueryable`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            针对主表的where条件
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAQueryable`1.OrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            针对主表单个字段排序（升序）
            </summary>
            <param name="expression">选择的排序列</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAQueryable`1.OrderByDesc(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            针对主表单个字段排序(降序)
            </summary>
            <param name="expression">选择的排序列</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAQueryable`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            针对T2表字段排序
            </summary>
            <typeparam name="T2"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAQueryable`1.OrderByDesc``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            针对T2表字段排序(降序)
            </summary>
            <typeparam name="T2"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAQueryable`1.Distinct">
            <summary>
            针对SQL语句去重
            </summary>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAQueryable`1.QueryAsDynamic">
            <summary>
            执行查询，返回dynamic集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAQueryable`1.QueryAsList``1">
            <summary>
            执行查询，返回泛型集合
            </summary>
            <typeparam name="TResult">要返回的类型</typeparam>
            <returns>泛型集合</returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAQueryable`1.QueryAsDataTable">
            <summary>
            执行查询，返回DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.DAQueryable`1.QueryPageAsList``1(System.Int32,System.Int32,System.Int32@)">
            <summary>
            按页查询，页码从1开始，返回泛型集合
            </summary>
            <typeparam name="TResult">返回的泛型集合的类型</typeparam>
            <param name="page">页码，从1开始</param>
            <param name="pageSize">每页的最大数量</param>
            <param name="totalCount">查询的总数</param>
            <returns>当页的泛型集合</returns>
        </member>
        <member name="T:PCI.Framework.ORM.IDAFacade">
            <summary>
            数据访问门面接口
            
            目的：
                1.提供统一入口，用于对象映射，数据持久化和数据访问；
                2.封装ADO.NET + Dapper + Dapper-Extensions；
               
            规范：
                DataAccess Facade使用外观模式（Facade）统一外部对多种数据库的访问
            </summary> 
        </member>
        <member name="P:PCI.Framework.ORM.IDAFacade.Prefix">
            <summary>
            参数化sql的变量前缀
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.IDAFacade.DBType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.IDAFacade.Connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.CreateTransaction">
            <summary>
            创建事务
            </summary>
            <returns>事务对象</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.GetAdapter(System.Data.IDbCommand)">
            <summary>
            获取适配器
            </summary>
            <param name="cmd">数据库访问命令</param>
            <returns>适配器接口</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.GetCommand(System.String,System.Data.IDataParameter[])">
            <summary>
            创建命令
            </summary>
            <param name="sql">sql语句</param>
            <param name="para">参数</param>
            <returns>sql命令</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.GetParameter(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            创建参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <param name="type">类型</param>
            <param name="size">参数长度</param>
            <param name="direction">参数方向</param>
            <returns>参数接口</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.Count``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            查询数量
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="predicate">过滤条件谓词</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>数量</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.Insert``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            新增
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="entity">实体</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>主键</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            新增多个
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="entities">实体集合</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>主键</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.Get``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据主键获取
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="id">主键</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>实体</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.GetList``1(System.Object,System.Collections.Generic.IList{PCI.Framework.ORM.DapperExtensions.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取全部
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="predicate">过滤条件谓词</param>
            <param name="sort">排序</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>结果集</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.Delete``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据实体删除
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="entity">实体</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.Delete``1(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据谓词条件删除
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="predicate">谓词删除条件,使用IList IPredicate和IPredicateGroup</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.Delete(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据sql传参删除
            </summary>
            <param name="sql">delete语句</param>
            <param name="param">参数</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.Update``1(``0,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据实体更新
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="entity">实体</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="ignoreAllKeyProperties">不需更新的字段</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.Query``1(System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询集合
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">参数</param>
            <param name="transaction">事务</param>
            <param name="buffered"></param>
            <param name="commandTimeout">超时时间</param>
            <param name="commandType">命令类型</param>
            <returns>结果集</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.QueryFirst``1(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            返回结果集的第一个实体,不存在则返回null
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">参数</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="commandType">命令类型</param>
            <returns>结果集的第一个实体</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.GetPageList``1(System.Object,System.Collections.Generic.IList{PCI.Framework.ORM.DapperExtensions.ISort},System.Int32,System.Int32,System.Int32@,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="predicate">谓词表达式</param>
            <param name="sort">排序</param>
            <param name="page">第几页</param>
            <param name="resultsPerPage">每页数量</param>
            <param name="totalCount">总记录数</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">是否缓存</param>
            <returns>结果集</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.GetPageList``1(System.String,System.Int32,System.Int32,System.Int32@,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="sql">sql语句</param>
            <param name="param">参数</param>
            <param name="page">第几页</param>
            <param name="resultsPerPage">每页个数</param>
            <param name="totalCount">总记录数</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">命令超时时间</param>
            <param name="buffered">是否缓存</param>
            <returns>结果集</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.CreateDAQuery``1">
            <summary>
            创建可查询的对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.GetList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IList{PCI.Framework.ORM.DapperExtensions.ISort},System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            查询集合(表达式)
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="where">表达式</param>
            <param name="sort">排序字段</param>
            <param name="commandType">命令类型</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <param name="buffered">是否缓存</param>
            <returns>结果集</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.GetPageList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IList{PCI.Framework.ORM.DapperExtensions.ISort},System.Int32,System.Int32,System.Int32@,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            分页查询(表达式)
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="where">表达式</param>
            <param name="sort">排序字段</param>
            <param name="page">第几页</param>
            <param name="resultsPerPage">每页个数</param>
            <param name="totalCount">总记录数</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">命令超时时间</param>
            <param name="buffered">是否缓存</param>
            <returns>结果集</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除(表达式)
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="where">where条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.Update``1(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            更新(表达式)
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="where">where条件</param>
            <param name="set">set语句的值</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            查询数量(表达式)
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="where">where条件</param>
            <param name="select">查询字段值</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>数量</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.ExecuteNonQuery(System.String,System.Data.IDbDataParameter[],System.Boolean,System.Data.IDbTransaction)">
            <summary>
            无查询执行
            </summary>
            <param name="sql">执行SQL</param>
            <param name="param">参数</param>
            <param name="isStoredProcedure">是否是存储过程</param>
            <param name="transaction">事务</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.ExecuteScalar(System.String,System.Data.IDbDataParameter[],System.Boolean,System.Data.IDbTransaction,System.Int32)">
            <summary>
            执行查询，并返回结果集的第一行第一列，忽略额外的行列
            </summary>
            <param name="sql">执行SQL</param>
            <param name="param">参数</param>
            <param name="isStoredProcedure">是否是存储过程</param>
            <param name="commandTimeout">执行超时</param>
            <param name="transaction">事务</param>
            <returns>查询对象</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.ExecuteTable(System.String,System.Data.IDbDataParameter[],System.Boolean,System.Int32)">
            <summary>
            执行返回一个名为Table的DataTable
            </summary>
            <param name="sql">执行SQL</param>
            <param name="param">参数</param>
            <param name="isStoredProcedure">是否设成 <c>true</c> [是否是存储过程].</param>
            <param name="commandTimeout">执行超时</param>
            <returns>数据表</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAFacade.ExecuteReader(System.String,System.Data.IDbDataParameter[],System.Data.CommandBehavior,System.Boolean,System.Int32,System.Data.IDbTransaction)">
            <summary>
            执行返回DataReader
            </summary>
            <param name="sql">执行SQL</param>
            <param name="param">参数</param>
            <param name="behavior">连接说明</param>
            <param name="isStoredProcedure">是否设成 <c>true</c> [是否是存储过程].</param>
            <param name="commandTimeout">执行超时</param>
            <returns>数据表</returns>
        </member>
        <member name="T:PCI.Framework.ORM.IDAQueryable`1">
            <summary>
            可查询对象的接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PCI.Framework.ORM.IDAQueryable`1.AndWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            AndWhere对主表的条件
            </summary>
            <param name="andWhere"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAQueryable`1.AndWhere``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            AndWhere对其他表的条件
            </summary>
            <typeparam name="TModel">其他表的类型</typeparam>
            <param name="andWhere">条件</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAQueryable`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            两个表的关联
            </summary>
            <typeparam name="TModel1">与主表关联的其他表对应的实体类型</typeparam>
            <param name="where">关联关系</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAQueryable`1.OrWhere``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            针对其他表的或条件
            </summary>
            <typeparam name="TModel">其他表对应的实体类型</typeparam>
            <param name="orWhere"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAQueryable`1.OrWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            针对主表的或条件
            </summary>
            <param name="orWhere">条件</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAQueryable`1.QueryAsDynamic">
            <summary>
            执行查询，返回dynamic集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAQueryable`1.QueryAsList``1">
            <summary>
            执行查询，返回泛型集合
            </summary>
            <typeparam name="TResult">要返回的类型</typeparam>
            <returns>泛型集合</returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAQueryable`1.QueryAsDataTable">
            <summary>
            执行查询，返回DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAQueryable`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Object}})">
            <summary>
            查询T,TModel1中的列
            </summary>
            <typeparam name="TModel1">其他表对应的实体类型</typeparam>
            <param name="select">要查询的列</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAQueryable`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            查询T中的列，select为空则选取全部列
            </summary>
            <param name="select">要查询的列，若为空，则选取全部列</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAQueryable`1.Select``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Object}})">
            <summary>
            查询T,TModel1, TModel2中的列
            </summary>
            <typeparam name="TModel1">其他表1对应的实体类型</typeparam>
            <typeparam name="TModel2">其他表2对应的实体类型</typeparam>
            <param name="select"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAQueryable`1.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            针对其他表对应的where条件
            </summary>
            <typeparam name="TModel">其他表对应的实体类型</typeparam>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAQueryable`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            针对主表的where条件
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAQueryable`1.OrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            针对主表字段排序
            </summary>
            <param name="expression">选择的排序列</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAQueryable`1.OrderByDesc(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            针对主表单个字段排序(降序)
            </summary>
            <param name="expression">选择的排序列</param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAQueryable`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            针对T2表字段排序
            </summary>
            <typeparam name="T2"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAQueryable`1.OrderByDesc``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            针对T2表字段排序(降序)
            </summary>
            <typeparam name="T2"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAQueryable`1.Distinct">
            <summary>
            针对SQL语句去重
            </summary>
            <returns></returns>
        </member>
        <member name="M:PCI.Framework.ORM.IDAQueryable`1.QueryPageAsList``1(System.Int32,System.Int32,System.Int32@)">
            <summary>
            按页查询，页码从1开始，返回泛型集合
            </summary>
            <typeparam name="TResult">返回的泛型集合的类型</typeparam>
            <param name="page">页码，从1开始</param>
            <param name="pageSize">每页的最大数量</param>
            <param name="totalCount">查询的总数</param>
            <returns>当页的泛型集合</returns>
        </member>
        <member name="T:PCI.Framework.ORM.Impl.Db2DAFacade">
            <summary>
            实现连接DB2数据库
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Impl.DmDAFacade">
            <summary>
            实现连接达梦数据库
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.Impl.GBaseDAFacade.GetPageSql(System.String,System.Int32,System.Int32)">
            <summary>
            分页查询，但暂不清楚限制，姑且使用Oracle兼容
            </summary>
            <param name="sql"></param>
            <param name="page"></param>
            <param name="resultsPerPage"></param>
            <returns></returns>
        </member>
        <member name="T:PCI.Framework.ORM.Impl.OracleDAFacade">
            <summary>
            实现连接Oracle数据库
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Impl.MySqlDAFacade">
            <summary>
            实现连接Mysql数据库
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.Impl.SQLServerDAFacade">
            <summary>
            实现连接SQLServer数据库
            </summary>
        </member>
        <member name="T:PCI.Framework.ORM.SqlLog.SqlLogger">
            <summary>
            日志记录入口类
            </summary>
        </member>
        <member name="F:PCI.Framework.ORM.SqlLog.SqlLogger.Log">
            <summary>
            通过推送日志信息，让客户端去记录日志
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.SqlLog.SqlLogger.OnLog(PCI.Framework.ORM.SqlLog.SqlLogInfo)">
            <summary>
            异步触发Log委托的执行
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:PCI.Framework.ORM.SqlLog.SqlLogInfo">
            <summary>
            Sql日志信息
            </summary>
        </member>
        <member name="M:PCI.Framework.ORM.SqlLog.SqlLogInfo.#ctor(System.Data.IDbCommand)">
            <summary>
            构造函数
            </summary>
            <param name="command"></param>
        </member>
        <member name="P:PCI.Framework.ORM.SqlLog.SqlLogInfo.Sql">
            <summary>
            SQL语句
            </summary>
        </member>
        <member name="P:PCI.Framework.ORM.SqlLog.SqlLogInfo.Parameters">
            <summary>
            SQL语句执行时的参数
            </summary>
        </member>
    </members>
</doc>
